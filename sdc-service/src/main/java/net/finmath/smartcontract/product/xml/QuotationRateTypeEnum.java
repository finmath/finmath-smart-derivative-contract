//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.03.27 at 10:23:13 AM CEST 
//


package net.finmath.smartcontract.product.xml;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for QuotationRateTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="QuotationRateTypeEnum"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *     &lt;enumeration value="Bid"/&gt;
 *     &lt;enumeration value="Ask"/&gt;
 *     &lt;enumeration value="Mid"/&gt;
 *     &lt;enumeration value="ExercisingPartyPays"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "QuotationRateTypeEnum")
@XmlEnum
public enum QuotationRateTypeEnum {


    /**
     * A bid rate.
     * 
     */
    @XmlEnumValue("Bid")
    BID("Bid"),

    /**
     * An ask rate.
     * 
     */
    @XmlEnumValue("Ask")
    ASK("Ask"),

    /**
     * A mid-market rate.
     * 
     */
    @XmlEnumValue("Mid")
    MID("Mid"),

    /**
     * If optional early termination is applicable to a swap transaction, the rate, which may be a bid or ask rate, which would result, if seller is in-the-money, in the higher absolute value of the cash settlement amount, or, is seller is out-of-the-money, in the lower absolute value of the cash settlement amount.
     * 
     */
    @XmlEnumValue("ExercisingPartyPays")
    EXERCISING_PARTY_PAYS("ExercisingPartyPays");
    private final String value;

    QuotationRateTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static QuotationRateTypeEnum fromValue(String v) {
        for (QuotationRateTypeEnum c: QuotationRateTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
